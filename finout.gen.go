// Package finout provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package finout

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ClientIDScopes  = "clientID.Scopes"
	SecretKeyScopes = "secretKey.Scopes"
)

// Defines values for QueryByViewRequestCostType.
const (
	AmortizedCost    QueryByViewRequestCostType = "amortizedCost"
	BlendedCost      QueryByViewRequestCostType = "blendedCost"
	NetAmortizedCost QueryByViewRequestCostType = "netAmortizedCost"
	NetUnblendedCost QueryByViewRequestCostType = "netUnblendedCost"
	UnblendedCost    QueryByViewRequestCostType = "unblendedCost"
)

// CreateEndpointRequest defines model for CreateEndpointRequest.
type CreateEndpointRequest struct {
	Configuration *struct {
		// To The destination address for notifications (email address or Slack webhook URL).
		To *string `json:"to,omitempty"`
	} `json:"configuration,omitempty"`

	// Name The name of the endpoint.
	Name *string `json:"name,omitempty"`

	// Type The endpoint type (Email or Slack).
	Type *string `json:"type,omitempty"`
}

// CreateEndpointResponse defines model for CreateEndpointResponse.
type CreateEndpointResponse struct {
	Endpoint *struct {
		// AccountId The account ID of the endpoint.
		AccountId     *string `json:"accountId,omitempty"`
		Configuration *struct {
			// To The destination address or endpoint for the notification.
			To *string `json:"to,omitempty"`
		} `json:"configuration,omitempty"`

		// CreatedAt The time and date the endpoint was created.
		CreatedAt *time.Time `json:"createdAt,omitempty"`

		// CreatedBy The creator of the endpoint.
		CreatedBy *string `json:"createdBy,omitempty"`

		// Id The unique identifier of your account's views.
		Id *string `json:"id,omitempty"`

		// Name The name of the endpoint.
		Name *string `json:"name,omitempty"`

		// Type The endpoint type (email or Slack).
		Type *string `json:"type,omitempty"`

		// UpdatedAt The time and date the endpoint was updated.
		UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	} `json:"endpoint,omitempty"`

	// RequestId The ID of this specific request.
	RequestId *string `json:"requestId,omitempty"`
}

// CreateVirtualTagRequest defines model for CreateVirtualTagRequest.
type CreateVirtualTagRequest struct {
	DefaultValue *string `json:"defaultValue,omitempty"`
	Name         *string `json:"name,omitempty"`
	Rules        *[]struct {
		Filters *map[string]string `json:"filters,omitempty"`
		To      *string            `json:"to,omitempty"`
	} `json:"rules,omitempty"`
}

// CreateVirtualTagResponse defines model for CreateVirtualTagResponse.
type CreateVirtualTagResponse struct {
	Category     *string    `json:"category,omitempty"`
	CreatedAt    *time.Time `json:"createdAt,omitempty"`
	CreatedBy    *string    `json:"createdBy,omitempty"`
	DefaultValue *string    `json:"defaultValue,omitempty"`
	Id           *string    `json:"id,omitempty"`
	Name         *string    `json:"name,omitempty"`
	Rules        *[]struct {
		Filters *map[string]string `json:"filters,omitempty"`
		To      *string            `json:"to,omitempty"`
	} `json:"rules,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy *string    `json:"updatedBy,omitempty"`
}

// GetEndpoints defines model for GetEndpoints.
type GetEndpoints struct {
	Endpoints *[]struct {
		Configuration *struct {
			// To The destination address or endpoint for the notification.
			To *string `json:"to,omitempty"`
		} `json:"configuration,omitempty"`

		// CreatedAt The time and date the endpoint was created.
		CreatedAt *time.Time `json:"createdAt,omitempty"`

		// CreatedBy The creator of the endpoint.
		CreatedBy *string `json:"createdBy,omitempty"`

		// Id The unique identifier of the endpoint.
		Id *string `json:"id,omitempty"`

		// Name The name of the endpoint.
		Name *string `json:"name,omitempty"`

		// RequestId The ID of this specific request.
		RequestId *string `json:"requestId,omitempty"`

		// Type The endpoint type (email or Slack).
		Type *string `json:"type,omitempty"`
	} `json:"endpoints,omitempty"`
}

// GetKeysResponse defines model for GetKeysResponse.
type GetKeysResponse struct {
	Error *string `json:"error"`
	Keys  *[]struct {
		CostCenter  *string `json:"costCenter,omitempty"`
		DisplayName *string `json:"displayName,omitempty"`
		Key         *string `json:"key,omitempty"`
	} `json:"keys,omitempty"`
	Request   *map[string]interface{} `json:"request,omitempty"`
	RequestId *string                 `json:"request_id,omitempty"`
}

// GetScansResponse defines model for GetScansResponse.
type GetScansResponse struct {
	RequestId *string `json:"requestId,omitempty"`
	Scans     *[]struct {
		ScanId          *string `json:"scanId,omitempty"`
		ScanLastRunTime *int    `json:"scanLastRunTime,omitempty"`
		ScanMetadata    *struct {
			AnalysisDays *int    `json:"analysisDays,omitempty"`
			CostCenter   *string `json:"costCenter,omitempty"`
			Type         *string `json:"type,omitempty"`
		} `json:"scanMetadata,omitempty"`
		ScanName *string `json:"scanName,omitempty"`
	} `json:"scans,omitempty"`
}

// GetValuesResponse defines model for GetValuesResponse.
type GetValuesResponse struct {
	AccountId *string `json:"accountId,omitempty"`
	Request   *struct {
		CostCenter *string `json:"costCenter,omitempty"`
		Key        *string `json:"key,omitempty"`
	} `json:"request,omitempty"`
	RequestId *string   `json:"requestId,omitempty"`
	Values    *[]string `json:"values,omitempty"`
}

// GetViewsResponse defines model for GetViewsResponse.
type GetViewsResponse struct {
	Data *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"data,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
}

// GetVirtualTagMetadataResponse defines model for GetVirtualTagMetadataResponse.
type GetVirtualTagMetadataResponse struct {
	Metadata *map[string]struct {
		CustomMetadata *map[string]string `json:"customMetadata,omitempty"`
		Groups         *[]string          `json:"groups,omitempty"`
	} `json:"metadata,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
}

// GetVirtualTagResponse defines model for GetVirtualTagResponse.
type GetVirtualTagResponse struct {
	Category     *string    `json:"category,omitempty"`
	CreatedAt    *time.Time `json:"createdAt,omitempty"`
	CreatedBy    *string    `json:"createdBy,omitempty"`
	DefaultValue *string    `json:"defaultValue,omitempty"`
	Id           *string    `json:"id,omitempty"`
	Name         *string    `json:"name,omitempty"`
	Rules        *[]struct {
		Filters *map[string]string `json:"filters,omitempty"`
		To      *string            `json:"to,omitempty"`
	} `json:"rules,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy *string    `json:"updatedBy,omitempty"`
}

// GetVirtualTags defines model for GetVirtualTags.
type GetVirtualTags struct {
	AccountId   *string `json:"accountId,omitempty"`
	RequestId   *string `json:"requestId,omitempty"`
	VirtualTags *[]struct {
		Category     *string    `json:"category,omitempty"`
		CreatedAt    *time.Time `json:"createdAt,omitempty"`
		CreatedBy    *string    `json:"createdBy,omitempty"`
		DefaultValue *string    `json:"defaultValue,omitempty"`
		Id           *string    `json:"id,omitempty"`
		Name         *string    `json:"name,omitempty"`
		Rules        *[]struct {
			Filters *map[string]string `json:"filters,omitempty"`
			To      *string            `json:"to,omitempty"`
		} `json:"rules,omitempty"`
		UpdatedAt *time.Time `json:"updatedAt,omitempty"`
		UpdatedBy *string    `json:"updatedBy,omitempty"`
	} `json:"virtualTags,omitempty"`
}

// QueryByViewRequest defines model for QueryByViewRequest.
type QueryByViewRequest struct {
	CostType *QueryByViewRequestCostType `json:"costType,omitempty"`
	Date     *struct {
		UnixTimeMillSecondsEnd   *int `json:"unixTimeMillSecondsEnd,omitempty"`
		UnixTimeMillSecondsStart *int `json:"unixTimeMillSecondsStart,omitempty"`
	} `json:"date,omitempty"`
	ViewId *string `json:"viewId,omitempty"`
}

// QueryByViewRequestCostType defines model for QueryByViewRequest.CostType.
type QueryByViewRequestCostType string

// QueryByViewResponse defines model for QueryByViewResponse.
type QueryByViewResponse struct {
	Data *[]struct {
		Data *[]struct {
			Cost *float32 `json:"cost,omitempty"`
			Time *int     `json:"time,omitempty"`
		} `json:"data,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"data,omitempty"`
	Request *struct {
		ViewId *string `json:"viewId,omitempty"`
	} `json:"request,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
}

// ScanRecommendationsRequest defines model for ScanRecommendationsRequest.
type ScanRecommendationsRequest struct {
	Filters *map[string]string `json:"filters,omitempty"`
	GroupBy *map[string]string `json:"groupBy,omitempty"`
	ScanId  *string            `json:"scanId,omitempty"`
}

// ScanRecommendationsResponse defines model for ScanRecommendationsResponse.
type ScanRecommendationsResponse struct {
	Data *[]struct {
		Group                       *string  `json:"group,omitempty"`
		GroupTotalCost              *float32 `json:"groupTotalCost,omitempty"`
		GroupTotalWaste             *float32 `json:"groupTotalWaste,omitempty"`
		GroupYearlyPotentialSavings *float32 `json:"groupYearlyPotentialSavings,omitempty"`
		Resources                   *[]struct {
			ResourceId       *string `json:"resourceId,omitempty"`
			ResourceMetadata *struct {
				AccountName  *string `json:"accountName,omitempty"`
				InstanceType *string `json:"instanceType,omitempty"`
			} `json:"resourceMetadata,omitempty"`
			ResourceMetrics *struct {
				UsedCpu *float32 `json:"usedCpu,omitempty"`
			} `json:"resourceMetrics,omitempty"`
			ResourceRecommendations *struct {
				TargetCpu          *float32 `json:"targetCpu,omitempty"`
				TargetInstanceType *string  `json:"targetInstanceType,omitempty"`
				TargetMemory       *float32 `json:"targetMemory,omitempty"`
			} `json:"resourceRecommendations,omitempty"`
			ResourceTotalCost              *float32 `json:"resourceTotalCost,omitempty"`
			ResourceTotalWaste             *float32 `json:"resourceTotalWaste,omitempty"`
			ResourceYearlyPotentialSavings *float32 `json:"resourceYearlyPotentialSavings,omitempty"`
		} `json:"resources,omitempty"`
	} `json:"data,omitempty"`
	RequestId       *string `json:"requestId,omitempty"`
	ScanId          *string `json:"scanId,omitempty"`
	ScanLastRunTime *int    `json:"scanLastRunTime,omitempty"`
	ScanMetadata    *struct {
		AnalysisDays *int    `json:"analysisDays,omitempty"`
		CostCenter   *string `json:"costCenter,omitempty"`
		Type         *string `json:"type,omitempty"`
	} `json:"scanMetadata,omitempty"`
	ScanName                   *string  `json:"scanName,omitempty"`
	ScanTotalCost              *float32 `json:"scanTotalCost,omitempty"`
	ScanTotalWaste             *float32 `json:"scanTotalWaste,omitempty"`
	ScanYearlyPotentialSavings *float32 `json:"scanYearlyPotentialSavings,omitempty"`
}

// UpdateVirtualTagMetadataRequest defines model for UpdateVirtualTagMetadataRequest.
type UpdateVirtualTagMetadataRequest map[string]struct {
	CustomMetadata *map[string]string `json:"customMetadata,omitempty"`
	Groups         *[]string          `json:"groups,omitempty"`
}

// UpdateVirtualTagMetadataResponse defines model for UpdateVirtualTagMetadataResponse.
type UpdateVirtualTagMetadataResponse struct {
	Metadata *map[string]struct {
		CustomMetadata *map[string]string `json:"customMetadata,omitempty"`
		Groups         *[]string          `json:"groups,omitempty"`
	} `json:"metadata,omitempty"`
	Request *struct {
		VirtualTagId *string `json:"virtualTagId,omitempty"`
	} `json:"request,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
}

// UpdateVirtualTagRequest defines model for UpdateVirtualTagRequest.
type UpdateVirtualTagRequest struct {
	DefaultValue *string `json:"defaultValue,omitempty"`
	Name         *string `json:"name,omitempty"`
	Rules        *[]struct {
		Filters *map[string]string `json:"filters,omitempty"`
		To      *string            `json:"to,omitempty"`
	} `json:"rules,omitempty"`
}

// UpdateVirtualTagResponse defines model for UpdateVirtualTagResponse.
type UpdateVirtualTagResponse struct {
	DefaultValue *string `json:"defaultValue,omitempty"`
	Name         *string `json:"name,omitempty"`
	RequestId    *string `json:"requestId,omitempty"`
	Rules        *[]struct {
		Filters *map[string]string `json:"filters,omitempty"`
		To      *string            `json:"to,omitempty"`
	} `json:"rules,omitempty"`
}

// PostCostGuardScansRecommendationsJSONRequestBody defines body for PostCostGuardScansRecommendations for application/json ContentType.
type PostCostGuardScansRecommendationsJSONRequestBody = ScanRecommendationsRequest

// PostCostQueryByViewJSONRequestBody defines body for PostCostQueryByView for application/json ContentType.
type PostCostQueryByViewJSONRequestBody = QueryByViewRequest

// PostEndpointsJSONRequestBody defines body for PostEndpoints for application/json ContentType.
type PostEndpointsJSONRequestBody = CreateEndpointRequest

// PostVirtualTagsJSONRequestBody defines body for PostVirtualTags for application/json ContentType.
type PostVirtualTagsJSONRequestBody = CreateVirtualTagRequest

// PutVirtualTagsIdJSONRequestBody defines body for PutVirtualTagsId for application/json ContentType.
type PutVirtualTagsIdJSONRequestBody = UpdateVirtualTagRequest

// PutVirtualTagsVtagIdMetadataJSONRequestBody defines body for PutVirtualTagsVtagIdMetadata for application/json ContentType.
type PutVirtualTagsVtagIdMetadataJSONRequestBody = UpdateVirtualTagMetadataRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCostGuardScans request
	GetCostGuardScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCostGuardScansRecommendationsWithBody request with any body
	PostCostGuardScansRecommendationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCostGuardScansRecommendations(ctx context.Context, body PostCostGuardScansRecommendationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCostQueryByViewWithBody request with any body
	PostCostQueryByViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCostQueryByView(ctx context.Context, body PostCostQueryByViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEndpoints request
	GetEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEndpointsWithBody request with any body
	PostEndpointsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEndpoints(ctx context.Context, body PostEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMegabillQueryLanguageKeys request
	GetMegabillQueryLanguageKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMegabillQueryLanguageValuesCostCenterKey request
	GetMegabillQueryLanguageValuesCostCenterKey(ctx context.Context, costCenter string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetView request
	GetView(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVirtualTags request
	GetVirtualTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVirtualTagsWithBody request with any body
	PostVirtualTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVirtualTags(ctx context.Context, body PostVirtualTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVirtualTagsId request
	DeleteVirtualTagsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVirtualTagsId request
	GetVirtualTagsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVirtualTagsIdWithBody request with any body
	PutVirtualTagsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVirtualTagsId(ctx context.Context, id string, body PutVirtualTagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVirtualTagsVtagIdMetadata request
	GetVirtualTagsVtagIdMetadata(ctx context.Context, vtagId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVirtualTagsVtagIdMetadataWithBody request with any body
	PutVirtualTagsVtagIdMetadataWithBody(ctx context.Context, vtagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVirtualTagsVtagIdMetadata(ctx context.Context, vtagId string, body PutVirtualTagsVtagIdMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCostGuardScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCostGuardScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCostGuardScansRecommendationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCostGuardScansRecommendationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCostGuardScansRecommendations(ctx context.Context, body PostCostGuardScansRecommendationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCostGuardScansRecommendationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCostQueryByViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCostQueryByViewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCostQueryByView(ctx context.Context, body PostCostQueryByViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCostQueryByViewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEndpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEndpointsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEndpointsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEndpoints(ctx context.Context, body PostEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEndpointsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMegabillQueryLanguageKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMegabillQueryLanguageKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMegabillQueryLanguageValuesCostCenterKey(ctx context.Context, costCenter string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMegabillQueryLanguageValuesCostCenterKeyRequest(c.Server, costCenter, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetView(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetViewRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVirtualTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVirtualTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVirtualTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVirtualTagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVirtualTags(ctx context.Context, body PostVirtualTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVirtualTagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVirtualTagsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVirtualTagsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVirtualTagsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVirtualTagsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVirtualTagsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVirtualTagsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVirtualTagsId(ctx context.Context, id string, body PutVirtualTagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVirtualTagsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVirtualTagsVtagIdMetadata(ctx context.Context, vtagId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVirtualTagsVtagIdMetadataRequest(c.Server, vtagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVirtualTagsVtagIdMetadataWithBody(ctx context.Context, vtagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVirtualTagsVtagIdMetadataRequestWithBody(c.Server, vtagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVirtualTagsVtagIdMetadata(ctx context.Context, vtagId string, body PutVirtualTagsVtagIdMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVirtualTagsVtagIdMetadataRequest(c.Server, vtagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCostGuardScansRequest generates requests for GetCostGuardScans
func NewGetCostGuardScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cost-guard/scans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCostGuardScansRecommendationsRequest calls the generic PostCostGuardScansRecommendations builder with application/json body
func NewPostCostGuardScansRecommendationsRequest(server string, body PostCostGuardScansRecommendationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCostGuardScansRecommendationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCostGuardScansRecommendationsRequestWithBody generates requests for PostCostGuardScansRecommendations with any type of body
func NewPostCostGuardScansRecommendationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cost-guard/scans-recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCostQueryByViewRequest calls the generic PostCostQueryByView builder with application/json body
func NewPostCostQueryByViewRequest(server string, body PostCostQueryByViewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCostQueryByViewRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCostQueryByViewRequestWithBody generates requests for PostCostQueryByView with any type of body
func NewPostCostQueryByViewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cost/query-by-view")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEndpointsRequest generates requests for GetEndpoints
func NewGetEndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEndpointsRequest calls the generic PostEndpoints builder with application/json body
func NewPostEndpointsRequest(server string, body PostEndpointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEndpointsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEndpointsRequestWithBody generates requests for PostEndpoints with any type of body
func NewPostEndpointsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMegabillQueryLanguageKeysRequest generates requests for GetMegabillQueryLanguageKeys
func NewGetMegabillQueryLanguageKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/megabill/query-language/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMegabillQueryLanguageValuesCostCenterKeyRequest generates requests for GetMegabillQueryLanguageValuesCostCenterKey
func NewGetMegabillQueryLanguageValuesCostCenterKeyRequest(server string, costCenter string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cost_center", runtime.ParamLocationPath, costCenter)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/megabill/query-language/values/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetViewRequest generates requests for GetView
func NewGetViewRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/view")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVirtualTagsRequest generates requests for GetVirtualTags
func NewGetVirtualTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtual-tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVirtualTagsRequest calls the generic PostVirtualTags builder with application/json body
func NewPostVirtualTagsRequest(server string, body PostVirtualTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVirtualTagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVirtualTagsRequestWithBody generates requests for PostVirtualTags with any type of body
func NewPostVirtualTagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtual-tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVirtualTagsIdRequest generates requests for DeleteVirtualTagsId
func NewDeleteVirtualTagsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtual-tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVirtualTagsIdRequest generates requests for GetVirtualTagsId
func NewGetVirtualTagsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtual-tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVirtualTagsIdRequest calls the generic PutVirtualTagsId builder with application/json body
func NewPutVirtualTagsIdRequest(server string, id string, body PutVirtualTagsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVirtualTagsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutVirtualTagsIdRequestWithBody generates requests for PutVirtualTagsId with any type of body
func NewPutVirtualTagsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtual-tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVirtualTagsVtagIdMetadataRequest generates requests for GetVirtualTagsVtagIdMetadata
func NewGetVirtualTagsVtagIdMetadataRequest(server string, vtagId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vtag_id", runtime.ParamLocationPath, vtagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtual-tags/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVirtualTagsVtagIdMetadataRequest calls the generic PutVirtualTagsVtagIdMetadata builder with application/json body
func NewPutVirtualTagsVtagIdMetadataRequest(server string, vtagId string, body PutVirtualTagsVtagIdMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVirtualTagsVtagIdMetadataRequestWithBody(server, vtagId, "application/json", bodyReader)
}

// NewPutVirtualTagsVtagIdMetadataRequestWithBody generates requests for PutVirtualTagsVtagIdMetadata with any type of body
func NewPutVirtualTagsVtagIdMetadataRequestWithBody(server string, vtagId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vtag_id", runtime.ParamLocationPath, vtagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtual-tags/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCostGuardScansWithResponse request
	GetCostGuardScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCostGuardScansResponse, error)

	// PostCostGuardScansRecommendationsWithBodyWithResponse request with any body
	PostCostGuardScansRecommendationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCostGuardScansRecommendationsResponse, error)

	PostCostGuardScansRecommendationsWithResponse(ctx context.Context, body PostCostGuardScansRecommendationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCostGuardScansRecommendationsResponse, error)

	// PostCostQueryByViewWithBodyWithResponse request with any body
	PostCostQueryByViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCostQueryByViewResponse, error)

	PostCostQueryByViewWithResponse(ctx context.Context, body PostCostQueryByViewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCostQueryByViewResponse, error)

	// GetEndpointsWithResponse request
	GetEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEndpointsResponse, error)

	// PostEndpointsWithBodyWithResponse request with any body
	PostEndpointsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEndpointsResponse, error)

	PostEndpointsWithResponse(ctx context.Context, body PostEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEndpointsResponse, error)

	// GetMegabillQueryLanguageKeysWithResponse request
	GetMegabillQueryLanguageKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMegabillQueryLanguageKeysResponse, error)

	// GetMegabillQueryLanguageValuesCostCenterKeyWithResponse request
	GetMegabillQueryLanguageValuesCostCenterKeyWithResponse(ctx context.Context, costCenter string, key string, reqEditors ...RequestEditorFn) (*GetMegabillQueryLanguageValuesCostCenterKeyResponse, error)

	// GetViewWithResponse request
	GetViewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetViewResponse, error)

	// GetVirtualTagsWithResponse request
	GetVirtualTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVirtualTagsResponse, error)

	// PostVirtualTagsWithBodyWithResponse request with any body
	PostVirtualTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVirtualTagsResponse, error)

	PostVirtualTagsWithResponse(ctx context.Context, body PostVirtualTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVirtualTagsResponse, error)

	// DeleteVirtualTagsIdWithResponse request
	DeleteVirtualTagsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteVirtualTagsIdResponse, error)

	// GetVirtualTagsIdWithResponse request
	GetVirtualTagsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetVirtualTagsIdResponse, error)

	// PutVirtualTagsIdWithBodyWithResponse request with any body
	PutVirtualTagsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVirtualTagsIdResponse, error)

	PutVirtualTagsIdWithResponse(ctx context.Context, id string, body PutVirtualTagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVirtualTagsIdResponse, error)

	// GetVirtualTagsVtagIdMetadataWithResponse request
	GetVirtualTagsVtagIdMetadataWithResponse(ctx context.Context, vtagId string, reqEditors ...RequestEditorFn) (*GetVirtualTagsVtagIdMetadataResponse, error)

	// PutVirtualTagsVtagIdMetadataWithBodyWithResponse request with any body
	PutVirtualTagsVtagIdMetadataWithBodyWithResponse(ctx context.Context, vtagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVirtualTagsVtagIdMetadataResponse, error)

	PutVirtualTagsVtagIdMetadataWithResponse(ctx context.Context, vtagId string, body PutVirtualTagsVtagIdMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVirtualTagsVtagIdMetadataResponse, error)
}

type GetCostGuardScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetScansResponse
}

// Status returns HTTPResponse.Status
func (r GetCostGuardScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCostGuardScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCostGuardScansRecommendationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanRecommendationsResponse
}

// Status returns HTTPResponse.Status
func (r PostCostGuardScansRecommendationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCostGuardScansRecommendationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCostQueryByViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryByViewResponse
}

// Status returns HTTPResponse.Status
func (r PostCostQueryByViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCostQueryByViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEndpoints
}

// Status returns HTTPResponse.Status
func (r GetEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateEndpointResponse
}

// Status returns HTTPResponse.Status
func (r PostEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMegabillQueryLanguageKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetKeysResponse
}

// Status returns HTTPResponse.Status
func (r GetMegabillQueryLanguageKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMegabillQueryLanguageKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMegabillQueryLanguageValuesCostCenterKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetValuesResponse
}

// Status returns HTTPResponse.Status
func (r GetMegabillQueryLanguageValuesCostCenterKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMegabillQueryLanguageValuesCostCenterKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetViewsResponse
}

// Status returns HTTPResponse.Status
func (r GetViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVirtualTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetVirtualTags
}

// Status returns HTTPResponse.Status
func (r GetVirtualTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVirtualTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVirtualTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateVirtualTagResponse
}

// Status returns HTTPResponse.Status
func (r PostVirtualTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVirtualTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVirtualTagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVirtualTagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVirtualTagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVirtualTagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetVirtualTagResponse
}

// Status returns HTTPResponse.Status
func (r GetVirtualTagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVirtualTagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVirtualTagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateVirtualTagResponse
}

// Status returns HTTPResponse.Status
func (r PutVirtualTagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVirtualTagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVirtualTagsVtagIdMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetVirtualTagMetadataResponse
}

// Status returns HTTPResponse.Status
func (r GetVirtualTagsVtagIdMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVirtualTagsVtagIdMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVirtualTagsVtagIdMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateVirtualTagMetadataResponse
}

// Status returns HTTPResponse.Status
func (r PutVirtualTagsVtagIdMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVirtualTagsVtagIdMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCostGuardScansWithResponse request returning *GetCostGuardScansResponse
func (c *ClientWithResponses) GetCostGuardScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCostGuardScansResponse, error) {
	rsp, err := c.GetCostGuardScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCostGuardScansResponse(rsp)
}

// PostCostGuardScansRecommendationsWithBodyWithResponse request with arbitrary body returning *PostCostGuardScansRecommendationsResponse
func (c *ClientWithResponses) PostCostGuardScansRecommendationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCostGuardScansRecommendationsResponse, error) {
	rsp, err := c.PostCostGuardScansRecommendationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCostGuardScansRecommendationsResponse(rsp)
}

func (c *ClientWithResponses) PostCostGuardScansRecommendationsWithResponse(ctx context.Context, body PostCostGuardScansRecommendationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCostGuardScansRecommendationsResponse, error) {
	rsp, err := c.PostCostGuardScansRecommendations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCostGuardScansRecommendationsResponse(rsp)
}

// PostCostQueryByViewWithBodyWithResponse request with arbitrary body returning *PostCostQueryByViewResponse
func (c *ClientWithResponses) PostCostQueryByViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCostQueryByViewResponse, error) {
	rsp, err := c.PostCostQueryByViewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCostQueryByViewResponse(rsp)
}

func (c *ClientWithResponses) PostCostQueryByViewWithResponse(ctx context.Context, body PostCostQueryByViewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCostQueryByViewResponse, error) {
	rsp, err := c.PostCostQueryByView(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCostQueryByViewResponse(rsp)
}

// GetEndpointsWithResponse request returning *GetEndpointsResponse
func (c *ClientWithResponses) GetEndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEndpointsResponse, error) {
	rsp, err := c.GetEndpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEndpointsResponse(rsp)
}

// PostEndpointsWithBodyWithResponse request with arbitrary body returning *PostEndpointsResponse
func (c *ClientWithResponses) PostEndpointsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEndpointsResponse, error) {
	rsp, err := c.PostEndpointsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEndpointsResponse(rsp)
}

func (c *ClientWithResponses) PostEndpointsWithResponse(ctx context.Context, body PostEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEndpointsResponse, error) {
	rsp, err := c.PostEndpoints(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEndpointsResponse(rsp)
}

// GetMegabillQueryLanguageKeysWithResponse request returning *GetMegabillQueryLanguageKeysResponse
func (c *ClientWithResponses) GetMegabillQueryLanguageKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMegabillQueryLanguageKeysResponse, error) {
	rsp, err := c.GetMegabillQueryLanguageKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMegabillQueryLanguageKeysResponse(rsp)
}

// GetMegabillQueryLanguageValuesCostCenterKeyWithResponse request returning *GetMegabillQueryLanguageValuesCostCenterKeyResponse
func (c *ClientWithResponses) GetMegabillQueryLanguageValuesCostCenterKeyWithResponse(ctx context.Context, costCenter string, key string, reqEditors ...RequestEditorFn) (*GetMegabillQueryLanguageValuesCostCenterKeyResponse, error) {
	rsp, err := c.GetMegabillQueryLanguageValuesCostCenterKey(ctx, costCenter, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMegabillQueryLanguageValuesCostCenterKeyResponse(rsp)
}

// GetViewWithResponse request returning *GetViewResponse
func (c *ClientWithResponses) GetViewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetViewResponse, error) {
	rsp, err := c.GetView(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetViewResponse(rsp)
}

// GetVirtualTagsWithResponse request returning *GetVirtualTagsResponse
func (c *ClientWithResponses) GetVirtualTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVirtualTagsResponse, error) {
	rsp, err := c.GetVirtualTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVirtualTagsResponse(rsp)
}

// PostVirtualTagsWithBodyWithResponse request with arbitrary body returning *PostVirtualTagsResponse
func (c *ClientWithResponses) PostVirtualTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVirtualTagsResponse, error) {
	rsp, err := c.PostVirtualTagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVirtualTagsResponse(rsp)
}

func (c *ClientWithResponses) PostVirtualTagsWithResponse(ctx context.Context, body PostVirtualTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVirtualTagsResponse, error) {
	rsp, err := c.PostVirtualTags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVirtualTagsResponse(rsp)
}

// DeleteVirtualTagsIdWithResponse request returning *DeleteVirtualTagsIdResponse
func (c *ClientWithResponses) DeleteVirtualTagsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteVirtualTagsIdResponse, error) {
	rsp, err := c.DeleteVirtualTagsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVirtualTagsIdResponse(rsp)
}

// GetVirtualTagsIdWithResponse request returning *GetVirtualTagsIdResponse
func (c *ClientWithResponses) GetVirtualTagsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetVirtualTagsIdResponse, error) {
	rsp, err := c.GetVirtualTagsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVirtualTagsIdResponse(rsp)
}

// PutVirtualTagsIdWithBodyWithResponse request with arbitrary body returning *PutVirtualTagsIdResponse
func (c *ClientWithResponses) PutVirtualTagsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVirtualTagsIdResponse, error) {
	rsp, err := c.PutVirtualTagsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVirtualTagsIdResponse(rsp)
}

func (c *ClientWithResponses) PutVirtualTagsIdWithResponse(ctx context.Context, id string, body PutVirtualTagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVirtualTagsIdResponse, error) {
	rsp, err := c.PutVirtualTagsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVirtualTagsIdResponse(rsp)
}

// GetVirtualTagsVtagIdMetadataWithResponse request returning *GetVirtualTagsVtagIdMetadataResponse
func (c *ClientWithResponses) GetVirtualTagsVtagIdMetadataWithResponse(ctx context.Context, vtagId string, reqEditors ...RequestEditorFn) (*GetVirtualTagsVtagIdMetadataResponse, error) {
	rsp, err := c.GetVirtualTagsVtagIdMetadata(ctx, vtagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVirtualTagsVtagIdMetadataResponse(rsp)
}

// PutVirtualTagsVtagIdMetadataWithBodyWithResponse request with arbitrary body returning *PutVirtualTagsVtagIdMetadataResponse
func (c *ClientWithResponses) PutVirtualTagsVtagIdMetadataWithBodyWithResponse(ctx context.Context, vtagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVirtualTagsVtagIdMetadataResponse, error) {
	rsp, err := c.PutVirtualTagsVtagIdMetadataWithBody(ctx, vtagId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVirtualTagsVtagIdMetadataResponse(rsp)
}

func (c *ClientWithResponses) PutVirtualTagsVtagIdMetadataWithResponse(ctx context.Context, vtagId string, body PutVirtualTagsVtagIdMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVirtualTagsVtagIdMetadataResponse, error) {
	rsp, err := c.PutVirtualTagsVtagIdMetadata(ctx, vtagId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVirtualTagsVtagIdMetadataResponse(rsp)
}

// ParseGetCostGuardScansResponse parses an HTTP response from a GetCostGuardScansWithResponse call
func ParseGetCostGuardScansResponse(rsp *http.Response) (*GetCostGuardScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCostGuardScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetScansResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCostGuardScansRecommendationsResponse parses an HTTP response from a PostCostGuardScansRecommendationsWithResponse call
func ParsePostCostGuardScansRecommendationsResponse(rsp *http.Response) (*PostCostGuardScansRecommendationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCostGuardScansRecommendationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanRecommendationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCostQueryByViewResponse parses an HTTP response from a PostCostQueryByViewWithResponse call
func ParsePostCostQueryByViewResponse(rsp *http.Response) (*PostCostQueryByViewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCostQueryByViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryByViewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEndpointsResponse parses an HTTP response from a GetEndpointsWithResponse call
func ParseGetEndpointsResponse(rsp *http.Response) (*GetEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEndpoints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEndpointsResponse parses an HTTP response from a PostEndpointsWithResponse call
func ParsePostEndpointsResponse(rsp *http.Response) (*PostEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateEndpointResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMegabillQueryLanguageKeysResponse parses an HTTP response from a GetMegabillQueryLanguageKeysWithResponse call
func ParseGetMegabillQueryLanguageKeysResponse(rsp *http.Response) (*GetMegabillQueryLanguageKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMegabillQueryLanguageKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetKeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMegabillQueryLanguageValuesCostCenterKeyResponse parses an HTTP response from a GetMegabillQueryLanguageValuesCostCenterKeyWithResponse call
func ParseGetMegabillQueryLanguageValuesCostCenterKeyResponse(rsp *http.Response) (*GetMegabillQueryLanguageValuesCostCenterKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMegabillQueryLanguageValuesCostCenterKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetValuesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetViewResponse parses an HTTP response from a GetViewWithResponse call
func ParseGetViewResponse(rsp *http.Response) (*GetViewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetViewsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVirtualTagsResponse parses an HTTP response from a GetVirtualTagsWithResponse call
func ParseGetVirtualTagsResponse(rsp *http.Response) (*GetVirtualTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVirtualTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetVirtualTags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostVirtualTagsResponse parses an HTTP response from a PostVirtualTagsWithResponse call
func ParsePostVirtualTagsResponse(rsp *http.Response) (*PostVirtualTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVirtualTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateVirtualTagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteVirtualTagsIdResponse parses an HTTP response from a DeleteVirtualTagsIdWithResponse call
func ParseDeleteVirtualTagsIdResponse(rsp *http.Response) (*DeleteVirtualTagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVirtualTagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVirtualTagsIdResponse parses an HTTP response from a GetVirtualTagsIdWithResponse call
func ParseGetVirtualTagsIdResponse(rsp *http.Response) (*GetVirtualTagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVirtualTagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetVirtualTagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVirtualTagsIdResponse parses an HTTP response from a PutVirtualTagsIdWithResponse call
func ParsePutVirtualTagsIdResponse(rsp *http.Response) (*PutVirtualTagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVirtualTagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateVirtualTagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVirtualTagsVtagIdMetadataResponse parses an HTTP response from a GetVirtualTagsVtagIdMetadataWithResponse call
func ParseGetVirtualTagsVtagIdMetadataResponse(rsp *http.Response) (*GetVirtualTagsVtagIdMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVirtualTagsVtagIdMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetVirtualTagMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVirtualTagsVtagIdMetadataResponse parses an HTTP response from a PutVirtualTagsVtagIdMetadataWithResponse call
func ParsePutVirtualTagsVtagIdMetadataResponse(rsp *http.Response) (*PutVirtualTagsVtagIdMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVirtualTagsVtagIdMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateVirtualTagMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
